<!DOCTYPE html>
<html>
<head>
  <title>OAuth2OrizeRecipes</title>
  <!-- Needed for mobile sites to work -->
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <!-- Style sheets -->
  <link rel="stylesheet" type="text/css" href="../stylesheets/pure-min.css">
  <link rel="stylesheet" type="text/css" href="../stylesheets/base.css">
  <link rel="stylesheet" type="text/css" href="../stylesheets/index-modules.css">
  <script type="text/javascript" src="../javascripts/jquery.min.js"></script>

  <!-- Javascript -->
  <script type="text/javascript">
    $(document).ready(function () {
      var http = location.protocol;
      var slashes = http.concat("//");
      var port = location.port ? ':' + location.port : '';
      var host = slashes.concat(window.location.hostname) + port;
      var fragment = window.location.hash;

      //replace the host name from the URL and replace all the links we have with the host name as well.
      $(".hostname").text(host);
      $("#authcode").attr("href", "/dialog/authorize?redirect_uri=" + host + "&response_type=code&client_id=abc123&scope=offline_access");
      $("#implicit").attr("href", "/dialog/authorize?redirect_uri=" + host + "&response_type=token&client_id=abc123");

      if (!fragment) {
        //They did not come from the implicit work flow, so show the main work flow of the page.
        $("#main").show();
      } else {
        //If we have a fragment then they must have come from the URL during an implicit call.  So show the
        //implicit work flow.
        $("#implicitDiv").show();
        $("#accessTokenResult").text(fragment.substring(fragment.indexOf("access_token="), fragment.indexOf("&")));
        $("#expirationResult").text(fragment.substring(fragment.indexOf("expires_in="), fragment.indexOf("&token_type=")));
        $("#tokenTypeResult").text(fragment.substring(fragment.indexOf("token_type=")));
        $(".access_token").text(fragment.substring((fragment.indexOf("access_token=") + "access_token".length + 1), fragment.indexOf("&")));
      }

      $("#apiEndPointButton").click(function (event) {
        //They clicked on the api end point button, so hide the implicit work flow and
        //make the ajax call to get the user information using the fragment from the URL
        $.ajax({
          type: 'GET',
          dataType: 'json',
          url: '/api/userinfo',
          headers: {
            "Authorization": "Bearer " + fragment.substring(14, fragment.indexOf("&"))
          },
          success: function (result) {
            $("#implicitDiv").hide();
            $("#userInformation").show();
            $("#userJsonInfo").text(JSON.stringify(result, undefined, 4));
          }
        });
      });

      $("#resourceOwnerSubmitPostButton").click(function (event) {
		debugger;
		var username = $("#resourceOwnerUsername").val();
		var password = $("#resourceOwnerPassword").val();
		
        //They clicked on the Submit Post button underneath the resource owner section
        $.ajax({
          type: 'POST',
          dataType: 'json',
          url: "/oauth/token",
          headers: {
            //This is abc123:ssh-secret base 64 encoded
            "Authorization": "Basic YWJjMTIzOnNzaC1zZWNyZXQ="
          },
          data: 'grant_type=password&username=' + username + '&password=' + password + '&scope=offline_access',
          success: function (result) {
            //Hide the main screen because we were successful, add the access token info, and
            //show the resource owner token section
            $("#main").hide();
            $(".access_token").text(result.access_token);
            $("#accessToken").show();
            $("#fullResult").append(JSON.stringify(result, undefined, 4));

            $("#accessTokenCallApiButton").click(function (event) {
              //They clicked on the resource owner token api call
              $.ajax({
                type: 'GET',
                dataType: 'json',
                url: '/api/userinfo',
                headers: {
                  "Authorization": "Bearer " + result.access_token
                },
                success: function (result) {
                  $("#accessToken").hide();
                  $("#userInformation").show();
                  $("#userJsonInfo").text(JSON.stringify(result, undefined, 4));
                }
              });
            });
          }
        });
      });

      $("#clientSubmitPostButton").click(function (event) {
        //They clicked on the Submit Post button underneath the client section
        $.ajax({
          type: 'POST',
          dataType: 'json',
          url: "/oauth/token",
          headers: {
            //This is abc123:ssh-secret base 64 encoded
            "Authorization": "Basic YWJjMTIzOnNzaC1zZWNyZXQ="
          },
          data: 'grant_type=client_credentials',
          success: function (result) {
            $("#main").hide();
            $(".access_token").text(result.access_token);
            $("#accessToken").show();
            $("#fullResult").append(JSON.stringify(result, undefined, 4));

            $("#accessTokenCallApiButton").click(function (event) {
              $.ajax({
                type: 'GET',
                dataType: 'json',
                url: '/api/userinfo',
                headers: {
                  "Authorization": "Bearer " + result.access_token
                },
                success: function (result) {
                  $("#accessToken").hide();
                  $("#userInformation").show();
                  $("#userJsonInfo").text(JSON.stringify(result, undefined, 4));
                }
              });
            });
          }
        });
      });
    });
  </script>
</head>

<body>

<!-- Main code screen with no URL fragments -->
<div id="main" style="display: none;">
  <h1>OAuth2orizeRecipes Server</h1>

  <p>
    <!-- Welcome message -->
    Welcome to OAuth 2.0. Try one of the grant types below. For more information, see the
    <a href="https://github.com/FrankHassanabad/Oauth2orizeRecipes/wiki">wiki site</a>.<br/>

    <!-- Authorization Code grant -->

  <h2><a href="http://tools.ietf.org/html/rfc6749#section-4.1">Authorization Code</a><br/></h2>
  The authorization code grant type is used to obtain both access tokens and refresh tokens and is optimized for
  confidential clients. Click the link below to begin the grant type.
  <a id="authcode" href="">
                <pre>
  <span class="hostname">https://localhost:3000</span>/dialog/authorize?
  redirect_uri=<span class="hostname">https://localhost:3000</span>&
  response_type=code&
  client_id=abc123&
  scope=offline_access
                </pre>
  </a>

  <!-- Implicit grant -->
  <p>

  <h2><a href="http://tools.ietf.org/html/rfc6749#section-4.2">Implicit</a><br/></h2>
  The implicit grant type is used to obtain access tokens (it does not support the issuance of refresh tokens) and
  is optimized for public clients known to operate a particular redirection URI. Click the link below to begin
  the grant type.
  <a id="implicit" href="">
            <pre>
  <span class="hostname">https://localhost:3000/</span>/dialog/authorize?
  redirect_uri=<span class="hostname">https://localhost:3000</span>&
  response_type=token&
  client_id=abc123
            </pre>
  </a>

  <!-- Resource Owner grant -->
  <div id="resourceOwner">
    <p>

    <h2><a href="http://tools.ietf.org/html/rfc6749#section-4.3">Resource Owner Password Credentials</a><br/></h2>
    The resource owner password credentials grant type is suitable in cases where the resource owner has a trust
    relationship with the client, such as the device operating system or a highly privileged application. Open your
    browser's debug tools, and click the Submit Post button below to begin the grant type.
                <pre>
  POST oauth/token HTTP/1.1
  Host: <span class="hostname">https://localhost:3000</span>
  Content-Type: application/x-www-form-urlencoded
  Authorization: Basic YWJjMTIzOnNzaC1zZWNyZXQ=

  grant_type=password&
  username=<input id="resourceOwnerUsername" type="text">&
  password=<input id="resourceOwnerPassword" type="password">&
  scope=offline_access
                </pre>
    <p>
      <button id="resourceOwnerSubmitPostButton" class="pure-button pure-button-primary" type="button">Submit Post
      </button>
    </p>
  </div>
  <br/>

  <!-- Client credentials grant -->
  <div id="clientCredentials">
    <p>

    <h2><a href="http://tools.ietf.org/html/rfc6749#section-4.4">Client Credentials</a><br/></h2>
    The client can request an access token using only its client credentials (or other supported means of
    authentication)
    when the client is requesting access to the protected resources under its control, or those of another resource
    owner that have been previously arranged with the authorization server. Open your browser's debug tools, and click
    the Submit Post button below to begin the grant type.
            <pre>
  POST oauth/token HTTP/1.1
  Host: <span class="hostname">https://localhost:3000</span>
  Content-Type: application/x-www-form-urlencoded
  Authorization: Basic YWJjMTIzOnNzaC1zZWNyZXQ=

  grant_type=client_credentials
            </pre>
    <p>
      <button id="clientSubmitPostButton" class="pure-button pure-button-primary" type="button">Submit Post</button>
    </p>
  </div>
</div>

<!-- URL fragment for the access token so display that information -->
<div id="implicitDiv" style="display: none;">
  <h1>
    Access Token
  </h1>

  <p>
    In your URL you will see the following access_token fragment which has your
    your access token, expiration, and token type
  </p>
        <pre><span id="accessTokenResult"></span>

<span id="expirationResult"></span>

<span id="tokenTypeResult"></span></pre>
  <p>
    You can use your access token to call an endpoint such as a user info endpoint.
    To do this, set the Authorization Bearer to have your access token. Open your browser's debug tools,
    press the Call API EndPoint button and look at your network tab.
  </p>
        <pre>GET /api/userinfo HTTP/1.1
Host: <span class="hostname">https://localhost:3000</span>
Authorization: Bearer <span class="access_token"></span>
        </pre>
  <button id="apiEndPointButton" class="pure-button pure-button-primary" type="button">Call API EndPoint</button>
</div>

<!-- Shown after the user clicks "Call API EndPoint" button -->
<div id="userInformation" style="display: none;">
  <h1>
    User Information
  </h1>

  <p>
    Underneath your brower's network tab you will see the following JSON response from a successful API endpoint call.
  </p>
  <pre><span id="userJsonInfo"></span></pre>
</div>

<!-- Shown after the user clicks the "Submit Post" on the resource owner password -->
<div id="accessToken" style="display: none;">
  <h1>
    Access Token
  </h1>

  <p>
    Underneath your browser's network tab you will see the following response
    with your access token, refresh token, expiration time, and token type
  </p>
  <pre><span id="fullResult"></span></pre>
  <p>
    You can use your access token to call an endpoint such as a user info endpoint.
    To do this, set the Authorization Bearer to have your access token. Press the
    Call API EndPoint button and look at your network tab.
  </p>
        <pre>GET /api/userinfo HTTP/1.1
Host: <span class="hostname">https://localhost:3000</span>
Authorization: Bearer <span class="access_token"></span>
        </pre>
  <button id="accessTokenCallApiButton" class="pure-button pure-button-primary" type="button">Call API EndPoint</button>
</div>

</body>
</html>


